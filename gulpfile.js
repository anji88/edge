var gulp = require('gulp'),
  sass = require('gulp-sass'),
  connect = require('gulp-connect'),
  svgstore = require('gulp-svgstore'),
  svgmin = require('gulp-svgmin'),
  rename = require('gulp-rename'),
  sourcemaps = require('gulp-sourcemaps'),
  prefix = require('gulp-autoprefixer'),
  sourcemaps = require('gulp-sourcemaps'),
  mmq = require('gulp-merge-media-queries'),
  htmlbeautify = require('gulp-html-beautify'),
  pug = require('gulp-pug')
// https://www.npmjs.com/package/gulp-html-beautify
// https://www.npmjs.com/package/gulp-pug

// Local server
gulp.task('connect', function () {
  connect.server({
    host: 'localhost',
    port: 7100,
    livereload: true
  })
})

var options = {indentSize: 2}

gulp.task('pug', function () {
  gulp.src('pug/**/!(_)*.pug')
    .pipe(pug())
    .pipe(htmlbeautify(options))
    .pipe(gulp.dest('dist/'))
})

// sass compiler
gulp.task('sass', function () {
  return gulp.src('scss/**/*.scss')
    .pipe(sourcemaps.init())
    .pipe(sass({outputStyle: 'expanded'}).on('error', sass.logError))
    .pipe(prefix({
      browsers: ['> 1%', 'IE 9'],
      cascade: false
    }))
    .pipe(sourcemaps.write(''))
    .pipe(gulp.dest('dist/assets/css'))
})
// svgstore
gulp.task('svgstore', () =>{
	var filename = 'sprite';
    gulp.src('dist/assets/svgs/*.svg', {})
		.pipe(svgmin())
		.pipe(svgstore())
		.pipe(rename(`${filename}.svg`))
        .pipe(gulp.dest('dist/assets/images/'))
});

// gulp-merge-media-queries
// Combine matching media queries into one media query definition. Useful for CSS generated by preprocessors using nested media queries
gulp.task('mmq', function () {
  gulp.src('dist/assets/css/**/*.css')
    .pipe(mmq({
      log: true
    }))
    .pipe(gulp.dest('dist/assets/dist'))
})

// watch
gulp.task('watch', ['sass', 'svgstore', 'pug'], function () {
  // watch scss files
  gulp.watch('scss/**/*.scss', ['sass'])
  gulp.watch('svgs/**/*.svg', ['svgstore'])
  gulp.watch('pug/**/*.pug', ['pug'])
})
gulp.task('default', ['sass', 'watch', 'connect'])
